\chapter{Introduction}\label{chap:intro}


The interest of using computers for logic deduction and reasoning can be traced in the nineteen century.
In 1869,  William Stanley Jevons designed and built the first machine doing logic inference.
With the progress of computers, it is used in different domains such as design automation process 
(logic optimization, test pattern generation, formal verification and functional simulation, etc).
Nowadays, one of the methods used in Boolean reasoning is the automatic satisfiability (SAT).

Given a propositional formula (generally the constraints of an encoded problem),
SAT solving consists in deciding whether the formula is satisfiable (i.e, all constraints can be
satisfied) or unsatisfiable (i.e, there is no way to satisfy all constraints at the same time).
This computation is made by a SAT solver that answer $\sat$ when the formula is satisfiable
and $\unsat$ otherwise.

SAT is the first problem that has been proven NP-complete in 1971~\cite{cook1971complexity}, this 
means that every NP problem can be solved by transforming it into SAT. Solving this problem in 
polynomial time is equivalent to the P versus NP, one of the seven millennium prize problem.


Despite this complexity, SAT solver are becoming more and more powerful.
Over the last decades, these can handle more and more complicated problems in different domains:
like \emph{formal methods} such that: bounded model checking (BMC)~\cite{bmc_99}; \emph{artificial intelligence}: planning decision~\cite{planning_92}; \emph{Bioinformatics} : Haplotype inference~\cite{biology_06}.
In a recent work, a SAT solver could solve the Pythagorean triple problem~\cite{heule2016solving}, an old mathematical conjecture,
with a proof of 200 TB.
This success comes from the introduction of sophisticated heuristics and optimization of the solving 
algorithm called Conflict Driven Clause Learning (CDCL) algorithm. It is based on the first non memory
intensive algorithm named by its authors Davis, Putnam, Logemann, and Loveland (DPLL)~\cite{dpll_62}.



Some problems have a huge search space and some of their instances cannot be handled.
An example of such a problem can be the vehicle routing problem (VRP).
It concerns the service of delivery company, in which
given a fleet of vehicles based in a depot, they must make rounds between several customers  who have requested
each a certain amount of goods. All clients visited by a vehicle refers to the tour of the vehicle. 
The goal is to find the tour that minimizes the delivery cost (monetary, distance, time, ...).
Finding the optimal solution for VRP problem is NP-Hard~\cite{toth2002vehicle}.

On an instance of this problem, renaming the set of identical vehicles will give us exactly the same problem.
This is called a \textit{symmetry}. In general, a symmetry is a transformation that leaves an object (or some aspect of the object) unchanged. Symmetries are typically defined as a \textit{syntactical} property of a problem when its presence is inherent to the encoding of the problem. A permutation of variable preserves the original specification. In the case where the symmetries are independent of any 
particular representation of the problem, it is called \textit{semantic}.


The presence of symmetry in a problem forces the search algorithm to fruitlessly explore symmetric
search space and greatly hinders its performance. \textit{Symmetry breaking} is an approach that
avoid the solver to visit symmetric search space. The first step to exploit symmetry is to find them.
In context of SAT, the detection of syntactical symmetry is done by a transforming the specification
in a colored graph and then apply a graph automorphism tool.





%
%This problem leads to combinatorial explosion of the search space.
%
%Different approach have been proposed to to deal with this combinatorial explosion.
%Here, we focus on the exploitation of \textit{symmetries}. 
%
%
%\section{Symmetry}
%
%In general, a symmetry is a transformation that leave an object (or some aspect of the object) unchanged.
%Many problem exhibits symmetry, for example in our previous example renaming a set of identical vehicle,
%rotating a chess board, 
%The presence of symmetry force search algorithm to fruitlessly explore symmetric search space.
%
%
%Symmetries are typically defined as a \textit{syntactical} property of a problem. 
%Its presence is inherent to the encoding of the problem.
%A permutation of variable preserve the original specification. 
%Conversely, a \textit{semantic} symmetries are independent of any 
%particular representation of the problem.
%
%
%To exploit the symmetry of a problem, the first step is to find them.



When symmetries are computed, the most common approach to exploit them is to use a \emph{static symmetry breaking} technique.
It takes the symmetric problem as input and produces a satisfiability equivalent formula by eliminating symmetries. This is done by augmenting the problem with constraints that force the solver to not explore the symmetric search  spaces. It is a easy to integrate static symmetry breaking, no modification of the solver is necessary.
In addition, this approach works well on many symmetric applications.
However, some highly symmetric instances cannot be solved using this technique.


Another approach to handle symmetry is \emph{dynamic symmetry breaking} techniques. In this one, the management of
symmetries is done during the search algorithm. Different approaches exist, on the first, the behavior of the solver is analyzed to avoid it to visit symmetric search space. On the other approach, some symmetrical facts are deduced from the
state of the solver. This has the effect of accelerating the tree traversal of the solver and so the solving time.



The challenge of this thesis is to understand the state of  the art approach in symmetry breaking and
improve them.

%all constraints of a formula can be satisfiable and answer ,
% or it is not possible to satisfy all constraints and answer \unsat.
%
%The problem of Boolean satisfiability (SAT) is nowadays an unavoidable problem. 
%
%
%
%SAT solving consists in deciding whether 
%all constraints of a formula can be satisfiable and answer \sat, or it is not possible to satisfy all
%constraints and answer \unsat.
%
%
%It consists of deciding whether 
%all constraints of a formula can be satisfiable and answer \sat, or it is not possible to satisfy all
%constraints and answer \unsat.




%
%Nowadays, computers are powerful and used in many applications in different domains.
%One of these domains is critical application that run in planes, cars, trains, etc.
%Software present in these machines must be correct and exempt of bugs.
%Proving the correctness of these software is a difficult problem. 
%
% can leads to combinatorial explosion.
% 
% 
%Over the years, computer scientists have developed many techniques to solve 
%these kinds of problems like \emph{constraint programming} (CP) \cite{rossi2006handbook},
%\emph{Propositional Satisfiability} (SAT) \cite{biere2009handbook},
%\emph{Satisfiability Modulo Theory} (SMT) \cite{barrett2018satisfiability}.
%
%
%
%In this thesis, we focus on solving propositional or Boolean formula, it consists of deciding whether 
%all constraints of a formula can be satisfiable and answer \sat, or it is not possible to satisfy all
%constraints and answer \unsat.
%This problem may appear to be simple but cannot be handled efficiently
%at the moment. This is due to the complexity of the problem which is prove to be NP-complete in 1971. 
%Many industrial applications problems can be transformed into a SAT problem.
%Improving the performance of tools that resolve this problem is an important challenge. 
%
%Over the last decades, SAT solver can handle more and more complicated problems in different domains:
%like \emph{formal methods}: hardware model checking,
%software model checking, etc.; \emph{artificial intelligence}: planning~\cite{planning_92}; \emph{game resolution}:
%sudoku, n-queens, \emph{Bioinformatics} : Haplotype inference,
%\emph{design automation} : equivalence checking.
%A recent work solve the Pythagorean triple, an old mathematical problem which has been resolved with 
%a SAT solver and produce a huge proof of 200 TB.
% 
%This success comes from the introduction of sophisticated heuristics and optimization of the solving 
%algorithm called Conflict Driven Clause Learning (CDCL) algorithm. It is based on the first non memory
%intensive algorithm named by its authors Davis, Putnam, Logemann, and Loveland (DPLL).
%Unfortunately, some problems still intractable for state-of-the-art SAT solvers. But some 
%of them exhibits symmetries that can be exploited by the solver to accelerate the overall solving time.
%At its most basic, symmetry is some transformations of an object that leaves it unchanged.
%Symmetries is common in real life, if we take some butterfly, it has exactly the same halves.
%In the case of satisfiability problems, it maps a solution of a problem to another.
%Ignoring these properties forces the solver to explore equivalent search space and it is a loss of
%time and energy. Considering the butterfly example if we search a pattern and it is not present, it is
%completely absurd to verify the other side. 
%
%In the literature, some works exist and tackle the symmetry problems.
%But, the first step to exploit symmetries is to find them. For this purpose, it exists technique 
%that use graph isomorphism.
%When symmetries are found, the most common approach to exploit it is \emph{static symmetry breaking}.
%It takes the symmetric problem as input and produces a satisfiability equivalent formula without symmetries. This transformation is made without any change of existing solvers. This approach works 
%well on many applications but stuck on some highly symmetrical ones.
%
%Another approach to handle symmetry is \emph{dynamic symmetry breaking}, it is included in the solver. It observes his behavior and use symmetry properties to avoid visiting symmetric search space.
%These approaches will be clearly explained all along this thesis.
%

This thesis addresses the challenge of optimizing the solving of a SAT problem in presence of
symmetry. In detail, my research exploits symmetry breaking during the solving.
%Understanding state-of-the-art techniques allows us to improve it.
Two majors contributions are detailed in this thesis. The first one uses the strengths of static symmetry 
breaking approach and applied it dynamically to avoid the drawbacks of the approach. It adds an opportunistic symmetry controller that avoids visiting symmetric search spaces. Benchmarks show that this approach allows to solve very hard symmetric problems.
The second contribution uses the previous one and combines it with state-of-the-art dynamic 
symmetry breaking approach and so takes the best of 2 worlds. This combination leads to 
important theoretical step for the usage of \emph{partial symmetry breaking} with the usage of 
\ emph{local symmetries}. 
 

%\section{Structure of the manuscript}

The remaining of this document is organized in 6 chapters. Chapter 2 describes the state of
the art for the Boolean satisfiability problem, Chapter 3 focuses on the symmetry present in SAT.
Chapter 4 focuses on the first contribution that uses dynamically the symmetries.
Chapter 5 describes our second solution to combine our first with another state-of-the-art  
dynamic symmetry breaking approach and Chapter 6 concludes the thesis. More precisely:
 
\textbf{The Boolean Satisfiability Problem}

The goal of \cref{chap:preliminaries} is to better understand what is SAT. 
It describes in detail the basics
about propositional logic that will be used in the rest of the manuscript. Satisfiability is a hard
problem but some particular forms that are easy to solve such as 2-SAT, Horn SAT and Xor-SAT will be presented.
This chapter describes also the original DPLL algorithm, and the
nowadays used CDCL algorithm and their important points. SAT can nowadays handle
sophisticated problems, to achieve this performance, modern efficient SAT solvers use different heuristics.
 An overview of these will be presented. Finally, with the presence of multi
core machines, an overview of the state-of-the-art parallel SAT solving will be presented.


\textbf{Symmetry and SAT}

The goal of \Cref{chap:symmetryinsat} is to better understand what is a symmetry. 
It requires an understanding of the group theory, so we first explain its basics and the notation that will be
 used in the rest of the manuscript.
This chapter also presents the process to find the (syntactic) symmetries of a SAT problem.
 This computation involves the creation of a graph from the problem and the computation of an
automorphism tool. After obtaining the symmetries, the second part will present how to
exploit them for reducing the search space of the solver. The two major approaches that
are the static symmetry breaking approach and dynamic symmetry breaking approach.
Static symmetry breaking is so far the most popular approach to take advantage of symmetries. It relies on a symmetry preprocessor which augments the initial problem with constraints that force the solver to consider only a few configurations among the many symmetric ones.
Dynamic symmetry breaking exploits the symmetries during the computation of the SAT solver to accelerate the
tree traversal of the SAT solver using symmetrical facts or avoids symmetric configurations like in the 
static approach.

\textbf{Between Static and Dynamic}

\Cref{chap:symmSAT} describes our efficient dynamic symmetry breaking approach.
The first part explains our algorithm, a new way to handle symmetries, that avoid the main problem
of the current static approaches. Our proposal has been implemented in state-of-the-art
SAT solver called $\minisat$~\cite{een2003extensible}. The second part presents the extensive experiments on the benchmarks of last six SAT competitions,
which show that our approach is competitive with the best state-of-the-art static symmetry breaking solutions.
The last part presents different heuristics that can improve the performance of our algorithm.


\textbf{Compose dynamic symmetry handling}

\Cref{chap:compose} describes the theoretical and practical aspects of combining two existing
symmetry  breaking approach with the introduction of \textit{local symmetries}.
 A extensive experiments show that the hybrid approach is better than 
each approach individually. The local symmetries allows to combine another 
symmetry breaking approach.

Finally, \Cref{chap:conclu} concludes this manuscript and discusses different directions we have identified for future works.
 

%% Local Variables:
%% TeX-master: "main.tex"
%% ispell-dictionary: "en_US"
%% mode: latex
%% mode: flyspell
%% coding: utf-8
%% End:
